version: "3.8"

networks:
  frontend:
  backend:

services:
  ### ============================================
  ### Workspace
  ### ============================================
  workspace:
    container_name: workspace
    build:
      context: ./workspace
    tty: true
    volumes:
      # host file first
      - ${CODE_PATH}:/var/workspace/cached:cached
      # container file first
      - ${DATA_PATH}/workspace:/var/workspace/delegated:delegated
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
      - "${WORKSPACE_PORTS}:8000-8100"
    networks:
      - frontend
      - backend

  ### ============================================
  ### Web Servers
  ### ============================================
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    restart: always
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ${SITES_PATH}:/usr/share/nginx/html
      - ${DATA_PATH}/nginx/logs:/var/log/nginx
    networks:
      - frontend
      - backend

  caddy:
    container_name: caddy
    build:
      context: ./caddy
    restart: always
    ports:
      - "${CADDY_HTTP_PORT}:80"
      - "${CADDY_HTTPS_PORT}:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - ${SITES_PATH}:/srv
      - ${DATA_PATH}/caddy/config:/config
      - ${DATA_PATH}/caddy/data:/data
      - ${DATA_PATH}/caddy/logs:/var/log/caddy
    networks:
      - frontend
      - backend

  ### ============================================
  ### Databases
  ### ============================================
  mysql:
    container_name: mysql
    build:
      context: ./mysql
    restart: always
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - ${DATA_PATH}/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
    networks:
      - backend

  redis:
    container_name: redis
    build:
      context: ./redis
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ${DATA_PATH}/redis:/data
    networks:
      - backend

  postgres:
    container_name: postgres
    build:
      context: ./postgres
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${DATA_PATH}/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  mongo:
    container_name: mongo
    build:
      context: ./mongo
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - ${DATA_PATH}/mongo/data:/data/db
      - ${DATA_PATH}/mongo/config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - backend

  ### ============================================
  ### Applications
  ### ============================================
  wordpress:
    container_name: wordpress
    build:
      context: ./wordpress
    restart: always
    depends_on:
      - mysql
    ports:
      - "${WORDPRESS_PORT}:80"
    volumes:
      - ${DATA_PATH}/wordpress:/var/www/html
    environment:
      - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
    networks:
      - frontend
      - backend

  ghost:
    container_name: ghost
    build:
      context: ./ghost
    restart: always
    depends_on:
      - mysql
    ports:
      - "${GHOST_PORT}:2368"
    volumes:
      - ${DATA_PATH}/ghost:/var/lib/ghost/content
    environment:
      - url=http://localhost:7004
      - database__client=${GHOST_DATABASE_CLIENT}
      - database__connection__host=${GHOST_DATABASE_CONNECTION_HOST}
      - database__connection__user=${GHOST_DATABASE_CONNECTION_USER}
      - database__connection__password=${GHOST_DATABASE_CONNECTION_PASSWORD}
      - database__connection__database=${GHOST_DATABASE_CONNECTION_DATABASE}
    networks:
      - frontend
      - backend

  phpmyadmin:
    container_name: phpmyadmin
    build:
      context: ./phpmyadmin
    restart: always
    ports:
      - "${PMA_PORT}:80"
    environment:
      - PMA_ARBITRARY=${PMA_ARBITRARY}
    networks:
      - frontend
      - backend

  phpredisadmin:
    container_name: phpredisadmin
    build:
      context: ./phpredisadmin
    restart: always
    depends_on:
      - redis
    ports:
      - "${PRA_PORT}:80"
    environment:
      - REDIS_1_HOST=${PRA_REDIS_1_HOST}
    networks:
      - frontend
      - backend

  adminer:
    container_name: adminer
    build:
      context: ./adminer
    restart: always
    ports:
      - "${ADMINER_PORT}:8080"
    networks:
      - frontend
      - backend

  mongo-express:
    container_name: mongo-express
    build:
      context: ./mongo-express
    restart: always
    depends_on:
      - mongo
    ports:
      - "${ME_PORT}:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
      - ME_CONFIG_OPTIONS_EDITORTHEME=${ME_CONFIG_OPTIONS_EDITORTHEME}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
    networks:
      - frontend
      - backend
